plugins {
    id 'play'
    id 'idea'
}

apply plugin: 'java'
apply plugin: 'play'
apply plugin: 'idea'

def playVersion = '2.4.11'
def scalaVersion = System.getProperty("scala.binary.version", /* default = */ "2.12")

model {
    components {
        play {
            platform play: playVersion, scala: scalaVersion, java: '1.8'
            injectedRoutesGenerator = true

            sources {
                twirlTemplates {
                    defaultImports = TwirlImports.JAVA
                }
            }
        }
    }
}

dependencies {
    play "com.typesafe.play:play-guice_$scalaVersion:$playVersion"
    play "com.typesafe.play:play-logback_$scalaVersion:$playVersion"
    play "com.typesafe.play:filters-helpers_$scalaVersion:$playVersion"

    play group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'
}

repositories {
    jcenter()
    maven {
        name "lightbend-maven-releases"
        url "https://repo.lightbend.com/lightbend/maven-release"
    }
    ivy {
        name "lightbend-ivy-release"
        url "https://repo.lightbend.com/lightbend/ivy-releases"
        layout "ivy"
    }
}

idea.module {
    // Source directories
    sourceDirs += file('app')
    testSourceDirs += file('test')

    // Generated sources
    def generated = [
            file("$buildDir/playBinary/src/compilePlayBinaryRoutes"),
            file("$buildDir/playBinary/src/compilePlayBinaryTwirlTemplates")
    ]
    generated.each { src ->
        sourceDirs += src
        generatedSourceDirs += src
    }

    // Output directories
    outputDir = file("$buildDir/playBinary/classes")
    testOutputDir = file("$buildDir/playBinary/testClasses")

    // Excluded dirs
    excludeDirs -= buildDir
    excludeDirs += [
            outputDir,
            testOutputDir,
            file("$buildDir/playBinary/lib"),
            file("$buildDir/playBinary/reports"),
            file("$buildDir/playBinary/results"),
            file("$buildDir/tmp"),
            file("$buildDir/assets")
    ]

    // Dependencies
    scopes.COMPILE = [ 'plus' : [ configurations.play ] ]
    scopes.TEST = [ 'plus' : [ configurations.playTest ] ]

    iml.withXml { provider ->
        def content = provider.node.component.content.first()

        // Resources
        def confUrl = 'file://$MODULE_DIR$/conf'
        def confAttrs = content.find { it.@url == confUrl }?.attributes()
        if (confAttrs) {
            confAttrs.remove('isTestSource')
            confAttrs.type = 'java-resource'
        } else {
            content.appendNode('sourceFolder', [url: confUrl, type: 'java-resource'])
        }

        // Test resources
        def testResourcesUrl = 'file://$MODULE_DIR$/test/resources'
        def testResourcesAttrs = content.find { it.@url == testResourcesUrl }?.attributes()
        if (testResourcesAttrs) {
            testResourcesAttrs.remove('isTestSource')
            testResourcesAttrs.type = 'java-test-resource'
        } else {
            content.appendNode('sourceFolder', [url: testResourcesUrl, type: 'java-resource'])
        }
    }
}

// EXAMPLE: How to add JVM parameters when running `runPlayBinary`.
// See other configurations for PlayRun here:
// https://docs.gradle.org/current/dsl/org.gradle.play.tasks.PlayRun.html
//
// tasks.withType(PlayRun) {
//     forkOptions.jvmArgs = ['-Dplay.http.secret.key=yadayada']
// }

// EXAMPLE: How to add JVM parameters to the script created by `stage`.
// See more details here:
// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/application/CreateStartScripts.html
//
// tasks.withType(CreateStartScripts) {
//     defaultJvmOpts = ['-Dplay.http.secret.key=yadayada']
// }
